import telebot
import config 
from telebot import types
bot = telebot.TeleBot(config.TOKEN)

user_data = {}
class User:
    def __init__(self, first_name):
        self.first_name = first_name 
        self.last_name = ''
@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('static/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)
 
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=2)
    item1 = types.KeyboardButton("–†–µ–∫–ª–∞–º–∞")
    item2 = types.KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è")
    item3 = types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
    item4 = types.KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–ª—ñ—î–Ω—Ç–∞")
    item5 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup.add(item1, item2, item3, item4, item5)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == '–†–µ–∫–ª–∞–º–∞':
                markup = types.InlineKeyboardMarkup(row_width=2)
                button1 = types.InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞", callback_data='Yes')
                button2 = types.InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞", callback_data='No') 
                markup.add(button1, button2)
                bot.send_message(message.chat.id, '–ß–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —Ä–µ–∫–ª–∞–º–∞?', reply_markup=markup)        
        elif message.text == '–î–æ–¥–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è':
            def ttt(message):
                msg1 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è: ")
                bot.register_next_step_handler(msg1, process_firstname_step_rekl)                                                                                                  
            def process_firstname_step_rekl(message):  
                user_id = message.from_user.id
                user_data[user_id] = User(message.text)
                msg1 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è: ")
                bot.register_next_step_handler(msg1, process_lastname_step_rekl) 

            def process_lastname_step_rekl(message):
                    user_id = message.from_user.id
                    user = user_data[user_id]
                    user.last_name = message.text
                    bot.send_message(message.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è")                     

            ttt(message)

        elif message.text == '–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞':      
            def rrr(message):
                msg2 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞: ")
                bot.register_next_step_handler(msg2, process_firstname_step_client)
            def process_firstname_step_client(message):  
                user_id = message.from_user.id
                user_data[user_id] = User(message.text)

                msg2 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞: ")
                bot.register_next_step_handler(msg2, process_lastname_step_client)   
            def process_lastname_step_client(message): 
                    user_id = message.from_user.id
                    user = user_data[user_id]
                    user.last_name = message.text
                    bot.send_message(message.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞")
            rrr(message)
        elif message.text == '–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–ª—ñ—î–Ω—Ç–∞':                                 
            def lll(message):
                msg3 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞: ")
                bot.register_next_step_handler(msg3, process_firstname_step_client)                                
            def process_firstname_step_client(message):  
                user_id = message.from_user.id
                user_data[user_id] = User(message.text)

                msg3 = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞: ")
                bot.register_next_step_handler(msg3, process_lastname_step_client)   
            def process_lastname_step_client(message): 
                user_id = message.from_user.id
                user = user_data[user_id]
                user.last_name = message.text

                markup = types.InlineKeyboardMarkup(row_width=2)
                lutton1 = types.InlineKeyboardButton("–ü–µ—Ä—à–∏–π", callback_data='first')
                lutton2 = types.InlineKeyboardButton("–î—Ä—É–≥–∏–π", callback_data='second') 
                lutton3 = types.InlineKeyboardButton("–¢—Ä–µ—Ç—ñ–π", callback_data='third')
                lutton4 = types.InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä—Ç–∏–π", callback_data='fourth')
                markup.add(lutton1, lutton2, lutton3, lutton4)
                bot.send_message(message.chat.id, '–Ø–∫–∏–π —Ç–æ–≤–∞—Ä –∫—É–ø–∏–≤ –∫–ª—ñ—î–Ω—Ç?', reply_markup=markup)
            lll(message)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏üò¢')
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'first':
                bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞üòä')
            elif call.data == 'second':
                bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞üòä')
            elif call.data == 'third':
                bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞üòä')
            elif call.data == 'fourth':
                bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞üòä')
 
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–Ø–∫–∏–π —Ç–æ–≤–∞—Ä –∫—É–ø–∏–≤ –∫–ª—ñ—î–Ω—Ç?",
                reply_markup=None)

    except Exception as e:
        print(repr(e)) 
    try:
        if call.message:
            if call.data == 'Yes':
                bot.send_message(call.message.chat.id, '–î–æ–¥–∞–Ω–æ –æ–ø–ª–∞—Ç—É –∑–∞ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—É —Ä–µ–∫–ª–∞–º—É')
            elif call.data == 'No':
                bot.send_message(call.message.chat.id, '–î–æ–¥–∞–Ω–æ –æ–ø–ª–∞—Ç—É –∑–∞ –Ω–µ—Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—É —Ä–µ–∫–ª–∞–º—É')
 
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ß–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —Ä–µ–∫–ª–∞–º–∞?",
                reply_markup=None)

    except Exception as e:
        print(repr(e))                                                                                                                     
 
# RUN
bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
if __name__ == '__main__':
    bot.polling(none_stop=True)
